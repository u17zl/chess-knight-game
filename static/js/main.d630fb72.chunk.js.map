{"version":3,"sources":["components/ChessBoard/components/BoardTable.js","components/ChessBoard/components/ButtonGroup.js","components/ChessBoard/ChessBoard.js","utils/random.js","utils/movement.js","App.js","serviceWorker.js","index.js"],"names":["BoardTable","props","position","target","board","handleMovePiece","className","map","row","rowIndex","id","key","cell","cellIndex","onClick","ButtonGroup","initStart","handleHelpMove","useState","showMsg","setShowMsg","useEffect","checkWin","length","type","style","marginTop","role","initBoard","Array","fill","i","ChessBoard","setPosition","setTarget","x_piece","Math","floor","random","y_piece","x_target","y_target","generateRandomPosition","init_position","init_target","console","log","current","next","dx","dy","isValidMove","fetch","process","method","headers","body","JSON","stringify","then","res","json","data","setTimeout","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d630fb72.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// pure board componnet\r\nconst BoardTable = props => {\r\n  const { position, target, board, handleMovePiece } = props;\r\n  return (\r\n    <table className=\"chessboard\">\r\n      <tbody>\r\n        {board.map((row, rowIndex) => (\r\n          <tr id=\"piece\" key={`row-${rowIndex}`}>\r\n            {row.map((cell, cellIndex) => {\r\n              let className;\r\n              if (rowIndex === position[0] && cellIndex === position[1]) {\r\n                className = \"knight\";\r\n              }\r\n              if (rowIndex === target[0] && cellIndex === target[1]) {\r\n                className = \"target\";\r\n              }\r\n              return (\r\n                <td\r\n                  key={`cell-${cellIndex}`}\r\n                  className={className}\r\n                  onClick={() => handleMovePiece(rowIndex, cellIndex)}\r\n                ></td>\r\n              );\r\n            })}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default BoardTable;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n// button group and win message component\r\nconst ButtonGroup = props => {\r\n  const { position, target, initStart, handleHelpMove } = props;\r\n  const [showMsg, setShowMsg] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkWin();\r\n  }, [position]);\r\n\r\n  const checkWin = () => {\r\n    if (\r\n      position[0] === target[0] &&\r\n      position[1] === target[1] &&\r\n      position.length !== 0\r\n    ) {\r\n      setShowMsg(true);\r\n    }\r\n  };\r\n\r\n  const handleStart = () => {\r\n    setShowMsg(false);\r\n    initStart();\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row justify-content-md-center\">\r\n        <div className=\"col-md-auto\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-success\"\r\n            onClick={handleStart}\r\n          >\r\n            Start\r\n          </button>\r\n        </div>\r\n        <div className=\"col-md-auto\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={handleHelpMove}\r\n          >\r\n            Help\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {showMsg && (\r\n        <div\r\n          className=\"row justify-content-md-center\"\r\n          style={{ marginTop: 30 }}\r\n        >\r\n          <div className=\"alert alert-primary\" role=\"alert\">\r\n            You Win! Click \"Start\" to replay\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonGroup;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { BoardTable, ButtonGroup } from \"./components\";\r\nimport generateRandomPosition from \"../../utils/random\";\r\nimport isValidMove from \"../../utils/movement\";\r\n\r\n// init board\r\nvar initBoard = new Array(8).fill(0);\r\nfor (var i = 0; i < initBoard.length; i++) {\r\n  initBoard[i] = new Array(8).fill(0);\r\n}\r\n\r\nconst ChessBoard = props => {\r\n  const [board, setBoard] = useState(initBoard);\r\n  const [position, setPosition] = useState([]);\r\n  const [target, setTarget] = useState([]);\r\n\r\n  // init component state\r\n  useEffect(() => {\r\n    initStart();\r\n  }, []);\r\n\r\n  // init component state function\r\n  const initStart = () => {\r\n    const [init_position, init_target] = generateRandomPosition();\r\n    setPosition(init_position);\r\n    setTarget(init_target);\r\n  };\r\n\r\n  // move knight piece\r\n  const handleMovePiece = (rowIndex, cellIndex) => {\r\n    console.log(\"click\", rowIndex, cellIndex);\r\n    if (isValidMove(position, [rowIndex, cellIndex])) {\r\n      setPosition([rowIndex, cellIndex]);\r\n    }\r\n  };\r\n\r\n  // help function fetch backend\r\n  const handleHelpMove = () => {\r\n    // if already approach target\r\n    if (\r\n      position[0] === target[0] &&\r\n      position[1] === target[1] &&\r\n      position.length !== 0\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    fetch(process.env.REACT_APP_API_URL + \"/api/chess/helps\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ position, target })\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        for (let i = 0; i < data.path.length; i++) {\r\n          setTimeout(() => {\r\n            setPosition(data.path[i]);\r\n          }, 1000 * i);\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <BoardTable\r\n        position={position}\r\n        target={target}\r\n        board={board}\r\n        handleMovePiece={handleMovePiece}\r\n      />\r\n      <ButtonGroup\r\n        position={position}\r\n        target={target}\r\n        initStart={initStart}\r\n        handleHelpMove={handleHelpMove}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ChessBoard;\r\n","/**\r\n * @returns {Array} [startPosition,targetPosition]\r\n */\r\n\r\nexport default function generateRandomPosition() {\r\n  while (true) {\r\n    let x_piece = Math.floor(Math.random() * 8);\r\n    let y_piece = Math.floor(Math.random() * 8);\r\n    let x_target = Math.floor(Math.random() * 8);\r\n    let y_target = Math.floor(Math.random() * 8);\r\n    if ([x_piece, y_piece] !== [x_target, y_target]) {\r\n      return [\r\n        [x_piece, y_piece],\r\n        [x_target, y_target]\r\n      ];\r\n    }\r\n  }\r\n}\r\n","/**\r\n *\r\n *\r\n * @export\r\n * @param {Array} current\r\n * @param {Array} next\r\n * @returns {Boolean}\r\n */\r\n\r\nexport default function isValidMove(current, next) {\r\n  // 8 possible moves\r\n  let dx = [2, 2, -2, -2, 1, 1, -1, -1];\r\n  let dy = [1, -1, 1, -1, 2, -2, 2, -2];\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    if (next[0] === current[0] + dx[i] && next[1] === current[1] + dy[i])\r\n      return true;\r\n  }\r\n  return false;\r\n}\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport ChessBoard from \"./components\";\n\nfunction App() {\n  return <ChessBoard />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}